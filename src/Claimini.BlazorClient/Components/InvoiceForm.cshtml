@using System
@using System.Collections.Generic
@using System.Threading.Tasks
@using Claimini.Shared
@using Microsoft.AspNetCore.Blazor
@using Microsoft.AspNetCore.Blazor.Components
@inherits Claimini.BlazorClient.Components.BaseComponent
@*<div class="form-group">
        <label for="PriceTotal">Created at</label>
        <label type="text" class="form-control" placeholder="Test Street 15" id="PriceTotal" bind="@invoice.StreetAddress" />
    </div>*@
@if (SelectedCustomer != null)
{
    <CustomerComponent Customer=SelectedCustomer />
}
else
{
    <h2>Select a Customer:</h2>
    <div class="input-group">
        <input type="search" class="form-control" placeholder="Customer Name" onchange="@Search" />
        <div class="input-group-append">
            <button class="btn btn-outline-secondary oi oi-loop-circular" type="button" onclick="@ClearFoundCustomers">Clear</button>
        </div>
    </div>

    if (FoundCustomers != null)
    {
        <table class="table">
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Address</th>
                <th>City</th>
                <th>Country</th>
            </tr>
            @foreach (var customer in FoundCustomers)
            {
                <tr onclick=@(() => SelectCustomer(customer.Id))>
                    <td>@customer.Id</td>
                    <td>@customer.Name</td>
                    <td>@customer.StreetAddress</td>
                    <td>@customer.City</td>
                    <td>@customer.Country</td>
                </tr>
            }
        </table>
    }
}
<button type="submit" class="btn btn-success" onclick="@Submit">Save</button>

@functions
{
    [Parameter]
    private InvoiceDto invoice { get; set; } = new InvoiceDto();

    [Parameter]
    private Func<InvoiceDto, Task> OnSubmit { get; set; }

    [Parameter]
    private Customer SelectedCustomer { get; set; }

    [Parameter]
    private List<Customer> FoundCustomers { get; set; }

    private void Search(UIChangeEventArgs args)
    {
        Console.WriteLine($"Search Args: {args.Value}");

        this.FoundCustomers = State.Customers.FindAll(x => x.Name.Contains(args.Value.ToString()));
    }

    private void ClearFoundCustomers()
    {
        this.FoundCustomers = State.Customers;

        StateHasChanged();
    }

    private void Submit()
    {
        //Console.WriteLine(invoice.Name + invoice.StreetAddress);
        Task result = this.OnSubmit?.Invoke(invoice);
    }

    private void SelectCustomer(int customerId)
    {
        this.SelectedCustomer = State.Customers.Find(x => x.Id == customerId);

        if (this.SelectedCustomer == null)
        {
            Console.WriteLine($"Could not select customer with Id {customerId}");
            return;
        }

        Console.WriteLine($"Selected customer: {this.SelectedCustomer.Id} {this.SelectedCustomer.Name}");
    }

}
