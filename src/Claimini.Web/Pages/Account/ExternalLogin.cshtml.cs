// <auto-generated/>
// <copyright file="ExternalLogin.cshtml.cs" company="Johannes Ebner">
// Copyright (c) Johannes Ebner. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root or https://spdx.org/licenses/MIT.html for full license information.
// </copyright>

namespace Claimini.Web.Pages.Account
{
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Security.Claims;
    using System.Threading.Tasks;
    using Claimini.Web.Data;
    using Microsoft.AspNetCore.Identity;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.RazorPages;
    using Microsoft.Extensions.Logging;

    /// <summary>
    /// External Login Model
    /// </summary>
    public class ExternalLoginModel : PageModel
    {
        private readonly SignInManager<ApplicationUser> signInManager;
        private readonly UserManager<ApplicationUser> userManager;
        private readonly ILogger<ExternalLoginModel> logger;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalLoginModel"/> class.
        /// </summary>
        /// <param name="signInManager">The sign-in manager</param>
        /// <param name="userManager">The user manager</param>
        /// <param name="logger">A logger</param>
        public ExternalLoginModel(
            SignInManager<ApplicationUser> signInManager,
            UserManager<ApplicationUser> userManager,
            ILogger<ExternalLoginModel> logger)
        {
            this.signInManager = signInManager;
            this.userManager = userManager;
            this.logger = logger;
        }

        /// <summary>
        /// Gets or sets the Input Model
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        /// Gets or sets the Login Provider
        /// </summary>
        public string LoginProvider { get; set; }

        /// <summary>
        /// Gets or sets the return URL
        /// </summary>
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Gets or sets the error message
        /// </summary>
        [TempData]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// GET Request Handler
        /// </summary>
        /// <returns>The Page</returns>
        public IActionResult OnGetAsync()
        {
            return this.RedirectToPage("./Login");
        }

        /// <summary>
        /// POST Request Handler
        /// </summary>
        /// <param name="provider">The login provider</param>
        /// <param name="returnUrl">The return URL</param>
        /// <returns>A challenge result</returns>
        public IActionResult OnPost(string provider, string returnUrl = null)
        {
            // Request a redirect to the external login provider.
            var redirectUrl = this.Url.Page("./ExternalLogin", pageHandler: "Callback", values: new { returnUrl });
            var properties = this.signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);
            return new ChallengeResult(provider, properties);
        }

        /// <summary>
        /// GET Request Handler
        /// Callback Handler
        /// </summary>
        /// <param name="returnUrl">An (optional) return URL</param>
        /// <param name="remoteError">A (optional) remote error</param>
        /// <returns>Login, Lockout or this Page</returns>
        public async Task<IActionResult> OnGetCallbackAsync(string returnUrl = null, string remoteError = null)
        {
            if (remoteError != null)
            {
                this.ErrorMessage = $"Error from external provider: {remoteError}";
                return this.RedirectToPage("./Login");
            }

            var info = await this.signInManager.GetExternalLoginInfoAsync();
            if (info == null)
            {
                return this.RedirectToPage("./Login");
            }

            // Sign in the user with this external login provider if the user already has a login.
            var result = await this.signInManager.ExternalLoginSignInAsync(info.LoginProvider, info.ProviderKey, isPersistent: false, bypassTwoFactor : true);
            if (result.Succeeded)
            {
                this.logger.LogInformation("{Name} logged in with {LoginProvider} provider.", info.Principal.Identity.Name, info.LoginProvider);
                return this.LocalRedirect(this.Url.GetLocalUrl(returnUrl));
            }

            if (result.IsLockedOut)
            {
                return this.RedirectToPage("./Lockout");
            }
            else
            {
                // If the user does not have an account, then ask the user to create an account.
                this.ReturnUrl = returnUrl;
                this.LoginProvider = info.LoginProvider;
                if (info.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
                {
                    this.Input = new InputModel
                    {
                        Email = info.Principal.FindFirstValue(ClaimTypes.Email)
                    };
                }

                return this.Page();
            }
        }

        /// <summary>
        /// POST Request Handler
        /// Confirmation Handler
        /// </summary>
        /// <param name="returnUrl">An optional return URL</param>
        /// <returns>Return URL or this Page</returns>
        public async Task<IActionResult> OnPostConfirmationAsync(string returnUrl = null)
        {
            if (this.ModelState.IsValid)
            {
                // Get the information about the user from the external login provider
                var info = await this.signInManager.GetExternalLoginInfoAsync();
                if (info == null)
                {
                    throw new ApplicationException("Error loading external login information during confirmation.");
                }

                var user = new ApplicationUser { UserName = this.Input.Email, Email = this.Input.Email };
                var result = await this.userManager.CreateAsync(user);
                if (result.Succeeded)
                {
                    result = await this.userManager.AddLoginAsync(user, info);
                    if (result.Succeeded)
                    {
                        await this.signInManager.SignInAsync(user, isPersistent: false);
                        this.logger.LogInformation("User created an account using {Name} provider.", info.LoginProvider);
                        return this.LocalRedirect(this.Url.GetLocalUrl(returnUrl));
                    }
                }

                foreach (var error in result.Errors)
                {
                    this.ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            this.ReturnUrl = returnUrl;
            return this.Page();
        }

        /// <summary>
        /// Input Model
        /// </summary>
        public class InputModel
        {
            /// <summary>
            /// Gets or sets the Email address
            /// </summary>
            [Required]
            [EmailAddress]
            public string Email { get; set; }
        }
    }
}
